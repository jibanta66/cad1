import React, { useState, useCallback } from 'react';
import { Viewport3D } from './components/Viewport3D';
import { Toolbar } from './components/Toolbar';
import { ExtrusionPanel } from './components/ExtrusionPanel';
import { ObjectPanel } from './components/ObjectPanel';
import { AdvancedSketchPanel } from './components/AdvancedSketchPanel';
import { ExtrusionEngine } from './engine/ExtrusionEngine';
import { CADObject, ViewportSettings, SketchShape, ExtrusionSettings, CameraState, SketchSettings } from './types';
import * as THREE from 'three';

function App() {
  const [objects, setObjects] = useState<CADObject[]>([]);
  const [selectedObjectId, setSelectedObjectId] = useState<string | null>(null);
  const [sketchMode, setSketchMode] = useState(false);
  const [currentTool, setCurrentTool] = useState('line');
  const [transformMode, setTransformMode] = useState('translate');
  const [showExtrusionPanel, setShowExtrusionPanel] = useState(false);
  const [showAdvancedSketchPanel, setShowAdvancedSketchPanel] = useState(false);
  const [currentSketch, setCurrentSketch] = useState<SketchShape[]>([]);
  const [extrusionPreview, setExtrusionPreview] = useState(false);
  const [extrusionHeight, setExtrusionHeight] = useState(1);

  const [sketchSettings, setSketchSettings] = useState<SketchSettings>({
    snapToGrid: true,
    gridSize: 0.5,
    workplaneVisible: true,
    mode: 'surface'
  });

  const [viewportSettings, setViewportSettings] = useState<ViewportSettings>({
    showGrid: true,
    showAxes: true,
    gridSize: 20,
    snapToGrid: true,
    wireframe: false
  });

  const [cameraState, setCameraState] = useState<CameraState>({
    position: { x: 15, y: 10, z: 15 },
    target: { x: 0, y: 0, z: 0 },
    distance: 20,
    azimuth: Math.PI / 4,
    elevation: Math.PI / 6
  });

  const handleSketchModeToggle = useCallback(() => {
    const newSketchMode = !sketchMode;
    setSketchMode(newSketchMode);
    setSelectedObjectId(null);
    
    if (newSketchMode) {
      // Entering sketch mode - show advanced panel
      setShowAdvancedSketchPanel(true);
    } else {
      // Exiting sketch mode
      setShowAdvancedSketchPanel(false);
      setExtrusionPreview(false);
      setShowExtrusionPanel(false);
    }
  }, [sketchMode]);

  const handleToolChange = useCallback((tool: string) => {
    setCurrentTool(tool);
  }, []);

  const handleObjectSelect = useCallback((id: string | null) => {
    setSelectedObjectId(id);
  }, []);

  const handleTransformModeChange = useCallback((mode: string) => {
    setTransformMode(mode);
  }, []);

  const handleToggleGrid = useCallback(() => {
    setViewportSettings(prev => ({
      ...prev,
      showGrid: !prev.showGrid
    }));
  }, []);

  const handleToggleWireframe = useCallback(() => {
    setViewportSettings(prev => ({
      ...prev,
      wireframe: !prev.wireframe
    }));
  }, []);

  const handleShowExtrusionPanel = useCallback(() => {
    setShowExtrusionPanel(true);
  }, []);

  const handleExtrusionPreviewChange = useCallback((enabled: boolean, height: number) => {
    setExtrusionPreview(enabled);
    setExtrusionHeight(height);
  }, []);

  const handleExtrude = useCallback((settings: ExtrusionSettings) => {
    if (currentSketch.length === 0) return;

    const geometry = ExtrusionEngine.extrudeSketch(currentSketch, settings);
    if (!geometry) return;

    const material = new THREE.MeshPhongMaterial({
      color: 0x4f46e5,
      shininess: 30,
      specular: 0x222222
    });

    const mesh = new THREE.Mesh(geometry, material);
    mesh.castShadow = true;
    mesh.receiveShadow = true;

    const newObject: CADObject = {
      id: `object-${Date.now()}`,
      name: `Extruded ${currentSketch[0]?.type || 'Shape'}`,
      type: 'extruded',
      geometry,
      material,
      mesh,
      position: { x: 0, y: 0, z: 0 },
      rotation: { x: 0, y: 0, z: 0 },
      scale: { x: 1, y: 1, z: 1 },
      visible: true,
      selected: false,
      originalSketch: [...currentSketch],
      extrusionHeight: settings.height
    };

    setObjects(prev => [...prev, newObject]);
    setCurrentSketch([]);
    setExtrusionPreview(false);
    setShowExtrusionPanel(false);
    setSketchMode(false);
    setShowAdvancedSketchPanel(false);
  }, [currentSketch]);

  const handleAdvancedExtrude = useCallback((shapes: any[]) => {
    if (shapes.length === 0) return;

    // Convert shapes to our format and extrude
    const convertedShapes: SketchShape[] = shapes.map(shape => ({
      id: shape.id,
      type: shape.type,
      points: shape.points.map((p: any) => ({
        x: p.position?.x || p.x || 0,
        y: p.position?.z || p.y || 0, // Note: z becomes y for 2D
        id: p.id
      })),
      closed: shape.closed,
      workplanePosition: { x: 0, y: 0, z: 0 },
      workplaneNormal: { x: 0, y: 1, z: 0 }
    }));

    const geometry = ExtrusionEngine.extrudeSketch(convertedShapes, {
      height: 1,
      direction: 'up',
      taper: 0,
      draft: 0
    });

    if (!geometry) return;

    const material = new THREE.MeshPhongMaterial({
      color: 0x10b981,
      shininess: 30,
      specular: 0x222222
    });

    const mesh = new THREE.Mesh(geometry, material);
    mesh.castShadow = true;
    mesh.receiveShadow = true;

    const newObject: CADObject = {
      id: `object-${Date.now()}`,
      name: `3D Sketch Extrusion`,
      type: 'extruded',
      geometry,
      material,
      mesh,
      position: { x: 0, y: 0, z: 0 },
      rotation: { x: 0, y: 0, z: 0 },
      scale: { x: 1, y: 1, z: 1 },
      visible: true,
      selected: false,
      originalSketch: convertedShapes,
      extrusionHeight: 1
    };

    setObjects(prev => [...prev, newObject]);
    setSketchMode(false);
    setShowAdvancedSketchPanel(false);
  }, []);

  const handleClearSketch = useCallback(() => {
    setCurrentSketch([]);
    setExtrusionPreview(false);
    setShowExtrusionPanel(false);
  }, []);

  const handleSketchComplete = useCallback((shapes: SketchShape[]) => {
    setCurrentSketch(shapes);
  }, []);

  const handleSketchSettingsChange = useCallback((settings: any) => {
    if (settings.clearSketch) {
      setCurrentSketch([]);
      return;
    }
    
    if (settings.finishSketch) {
      setSketchMode(false);
      setShowAdvancedSketchPanel(false);
      return;
    }

    setSketchSettings(prev => ({
      ...prev,
      ...settings
    }));
  }, []);

  const handleSketchModeChange = useCallback((mode: 'surface' | 'plane' | 'free') => {
    setSketchSettings(prev => ({
      ...prev,
      mode
    }));
  }, []);

  const handleObjectToggleVisibility = useCallback((id: string) => {
    setObjects(prev => prev.map(obj => 
      obj.id === id ? { ...obj, visible: !obj.visible } : obj
    ));
  }, []);

  const handleObjectDelete = useCallback((id: string) => {
    setObjects(prev => prev.filter(obj => obj.id !== id));
    if (selectedObjectId === id) {
      setSelectedObjectId(null);
    }
  }, [selectedObjectId]);

  const handleObjectDuplicate = useCallback((id: string) => {
    const originalObject = objects.find(obj => obj.id === id);
    if (!originalObject) return;

    const newGeometry = originalObject.geometry.clone();
    const newMaterial = originalObject.material.clone();
    const newMesh = new THREE.Mesh(newGeometry, newMaterial);
    newMesh.castShadow = true;
    newMesh.receiveShadow = true;

    const duplicatedObject: CADObject = {
      ...originalObject,
      id: `object-${Date.now()}`,
      name: `${originalObject.name} Copy`,
      geometry: newGeometry,
      material: newMaterial,
      mesh: newMesh,
      position: {
        x: originalObject.position.x + 2,
        y: originalObject.position.y,
        z: originalObject.position.z + 2
      },
      selected: false
    };

    setObjects(prev => [...prev, duplicatedObject]);
  }, [objects]);

  const handleCameraUpdate = useCallback((state: CameraState) => {
    setCameraState(state);
  }, []);

  return (
    <div className="h-screen flex flex-col bg-gray-900 text-white">
      <Toolbar
        sketchMode={sketchMode}
        currentTool={currentTool}
        onToolChange={handleToolChange}
        onSketchModeToggle={handleSketchModeToggle}
        onExtrude={handleShowExtrusionPanel}
        onClearSketch={handleClearSketch}
        transformMode={transformMode}
        onTransformModeChange={handleTransformModeChange}
        showGrid={viewportSettings.showGrid}
        onToggleGrid={handleToggleGrid}
        onToggleWireframe={handleToggleWireframe}
        wireframe={viewportSettings.wireframe}
      />

      <div className="flex-1 flex">
        <div className="flex-1 relative">
          <Viewport3D
            objects={objects}
            selectedObjectId={selectedObjectId}
            onObjectSelect={handleObjectSelect}
            onCameraUpdate={handleCameraUpdate}
            viewportSettings={viewportSettings}
            sketchMode={sketchMode}
            currentTool={currentTool}
            onSketchComplete={handleSketchComplete}
            extrusionPreview={extrusionPreview}
            extrusionHeight={extrusionHeight}
          />

          <ExtrusionPanel
            visible={showExtrusionPanel}
            onClose={() => setShowExtrusionPanel(false)}
            onExtrude={handleExtrude}
            onPreviewChange={handleExtrusionPreviewChange}
          />

          <AdvancedSketchPanel
            isOpen={showAdvancedSketchPanel}
            onClose={() => setShowAdvancedSketchPanel(false)}
            onExtrude={handleAdvancedExtrude}
            onToolChange={handleToolChange}
            onModeChange={handleSketchModeChange}
            onSettingsChange={handleSketchSettingsChange}
            activeTool={currentTool}
            sketchMode={sketchSettings.mode}
            snapToGrid={sketchSettings.snapToGrid}
            gridSize={sketchSettings.gridSize}
            workplaneVisible={sketchSettings.workplaneVisible}
            currentShapes={currentSketch}
          />
        </div>

        <div className="w-80 p-4 bg-gray-900 border-l border-gray-700 overflow-y-auto">
          <ObjectPanel
            objects={objects}
            selectedObjectId={selectedObjectId}
            onObjectSelect={handleObjectSelect}
            onObjectToggleVisibility={handleObjectToggleVisibility}
            onObjectDelete={handleObjectDelete}
            onObjectDuplicate={handleObjectDuplicate}
          />

          {/* Camera info */}
          <div className="mt-4 bg-gray-800 rounded-lg p-3">
            <h4 className="text-sm font-medium text-white mb-2">Camera</h4>
            <div className="text-xs text-gray-400 space-y-1">
              <div>X: {cameraState.position.x.toFixed(1)}</div>
              <div>Y: {cameraState.position.y.toFixed(1)}</div>
              <div>Z: {cameraState.position.z.toFixed(1)}</div>
              <div>Distance: {cameraState.distance.toFixed(1)}</div>
            </div>
          </div>

          {/* Sketch Settings */}
          {sketchMode && (
            <div className="mt-4 bg-purple-900 bg-opacity-20 border border-purple-700 rounded-lg p-4">
              <div className="text-lg font-semibold mb-2 text-purple-200">3D Sketch Active</div>
              <div className="text-sm space-y-2 text-purple-300">
                <p>Mode: <strong>{sketchSettings.mode}</strong></p>
                <p>Tool: <strong>{currentTool}</strong></p>
                <p>Grid: <strong>{sketchSettings.snapToGrid ? 'On' : 'Off'}</strong></p>
                <p>Shapes: <strong>{currentSketch.length}</strong></p>
              </div>
            </div>
          )}

          {/* Welcome message */}
          {objects.length === 0 && !sketchMode && (
            <div className="mt-4 bg-blue-900 bg-opacity-20 border border-blue-700 rounded-lg p-4 text-blue-200">
              <div className="text-lg font-semibold mb-2">Welcome to 3D CAD</div>
              <div className="text-sm space-y-2 opacity-90">
                <p>Get started by clicking <strong>"Start Sketch"</strong> to create 2D shapes.</p>
                <p>Then use <strong>"Extrude"</strong> to turn them into 3D objects!</p>
                <p>Try the advanced 3D sketching for surface-based drawing.</p>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

export default App;