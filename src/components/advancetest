import React from 'react';
import { Eye, EyeOff, Trash2, Copy, Edit } from 'lucide-react';
import { CADObject } from '../types';

interface ObjectPanelProps {
  objects: CADObject[];
  selectedObjectId: string | null;
  onObjectSelect: (id: string | null) => void;
  onObjectToggleVisibility: (id: string) => void;
  onObjectDelete: (id: string) => void;
  onObjectDuplicate: (id: string) => void;
}

export const ObjectPanel: React.FC<ObjectPanelProps> = ({
  objects,
  selectedObjectId,
  onObjectSelect,
  onObjectToggleVisibility,
  onObjectDelete,
  onObjectDuplicate
}) => {
  if (objects.length === 0) {
    return (
      <div className="bg-gray-800 rounded-lg p-4 text-gray-400 text-center">
        <div className="text-4xl mb-2">ðŸ“¦</div>
        <div className="text-sm">No objects in scene</div>
        <div className="text-xs mt-1 opacity-75">
          Create sketches and extrude them to add objects
        </div>
      </div>
    );
  }

  return (
    <div className="bg-gray-800 rounded-lg">
      <div className="p-4 border-b border-gray-700">
        <h3 className="text-lg font-semibold text-white">Objects</h3>
        <div className="text-xs text-gray-400 mt-1">
          {objects.length} object{objects.length !== 1 ? 's' : ''} in scene
        </div>
      </div>
      
      <div className="max-h-64 overflow-y-auto">
        {objects.map((object) => (
          <div
            key={object.id}
            className={`flex items-center gap-3 p-3 border-b border-gray-700 hover:bg-gray-700 cursor-pointer transition-colors ${
              selectedObjectId === object.id ? 'bg-blue-900 bg-opacity-50' : ''
            }`}
            onClick={() => onObjectSelect(object.id)}
          >
            <div className="flex-1 min-w-0">
              <div className="font-medium text-white truncate">
                {object.name}
              </div>
              <div className="text-xs text-gray-400 capitalize">
                {object.type} â€¢ Height: {object.extrusionHeight?.toFixed(1) || 'N/A'}
              </div>
            </div>
            
            <div className="flex items-center gap-1">
              <button
                onClick={(e) => {
                  e.stopPropagation();
                  onObjectToggleVisibility(object.id);
                }}
                className={`p-1 rounded transition-colors ${
                  object.visible
                    ? 'text-green-400 hover:text-green-300'
                    : 'text-gray-500 hover:text-gray-400'
                }`}
                title={object.visible ? 'Hide' : 'Show'}
              >
                {object.visible ? <Eye size={16} /> : <EyeOff size={16} />}
              </button>
              
              <button
                onClick={(e) => {
                  e.stopPropagation();
                  onObjectDuplicate(object.id);
                }}
                className="p-1 text-blue-400 hover:text-blue-300 rounded transition-colors"
                title="Duplicate"
              >
                <Copy size={16} />
              </button>
              
              <button
                onClick={(e) => {
                  e.stopPropagation();
                  onObjectDelete(object.id);
                }}
                className="p-1 text-red-400 hover:text-red-300 rounded transition-colors"
                title="Delete"
              >
                <Trash2 size={16} />
              </button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};